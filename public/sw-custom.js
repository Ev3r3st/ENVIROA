/* Custom script that runs **after** the Workbox bundle generated by next‑pwa. */

// Allow the app shell to force‑activate a fresh service worker
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// NÁZEV CACHE PRO VLASTNÍ POTŘEBY (POKUD NĚJAKÉ BUDOU)
// const CUSTOM_CACHE_NAME = 'evo-custom-cache-v1';

// ODSTRANĚNO: Explicitní cachování offline assetů - řeší Workbox precaching
/*
const CACHE_NAME = 'evo-offline-v1';
const OFFLINE_ASSETS = [
  '/offline.html',
  '/icons/icon-192x192.png',
  '/icons/icon-512x512.png',
];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => cache.addAll(OFFLINE_ASSETS))
  );
});
*/

// Ponecháno: Čištění starých cache (upravte podle potřeby, pokud máte jiné vlastní cache)
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((keys) =>
      Promise.all(
        keys.map((k) => {
          // Nemažeme Workbox cache ani případné jiné vlastní cache, které chceme zachovat
          if (!k.startsWith('workbox-') /* && k !== CUSTOM_CACHE_NAME */ ) {
            console.log('Deleting old cache:', k);
            return caches.delete(k);
          }
          return null;
        })
      )
    ).then(() => {
      console.log('Claiming clients...');
      return self.clients.claim(); // Zajistí, že aktivovaný SW převezme kontrolu ihned
    })
  );
});

// ODSTRANĚNO: Vlastní fetch listener pro navigaci - řeší Workbox runtimeCaching
/*
self.addEventListener('fetch', (event) => {
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => caches.match('/offline.html'))
    );
  }
});
*/

// Zde můžete přidat další vlastní logiku service workera, pokud je potřeba
// (např. push notifikace, background sync), která nekonfliktuje s Workboxem.